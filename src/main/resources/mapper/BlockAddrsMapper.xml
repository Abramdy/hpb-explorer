<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hpb.bc.mapper.BlockAddrsMapper">
    <resultMap id="BaseResultMap" type="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="b_number" jdbcType="BIGINT" property="bNumber"/>
        <result column="block_hash" jdbcType="VARCHAR" property="blockHash"/>
        <result column="block_timestamp" jdbcType="BIGINT" property="blockTimestamp"/>
        <result column="txcount" jdbcType="INTEGER" property="txcount"/>
    </resultMap>

    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <result column="addrs" jdbcType="LONGVARCHAR" property="addrs"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <if test="addr != null">
                addrs like '%,${addr},%' and
            </if>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <if test="addr != null">
                addrs like '%,${addr},%' and
            </if>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        b_number,block_hash,block_timestamp,txcount
    </sql>

    <sql id="Base_Column_List_WITH_ADDRS">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        b_number,block_hash,block_timestamp,addrs,txcount
    </sql>

    <sql id="Blob_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        addrs
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.hpb.bc.example.BlockAddrsExample"
            resultMap="ResultMapWithBLOBs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from block_addrs_${tableSuffix}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="fechNum != null">
            limit ${fechNum}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.hpb.bc.example.BlockAddrsExample" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from block_addrs_${tableSuffix}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="fechNum != null">
            limit ${fechNum}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.hpb.bc.example.BlockAddrsExample">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from block_addrs_${tableSuffix}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into block_addrs_${tableSuffix} (b_number,block_hash,block_timestamp,txcount, addrs
        )
        values (#{bNumber,jdbcType=BIGINT}, #{blockHash,jdbcType=VARCHAR}, #{blockTimestamp,jdbcType=BIGINT},
        #{txcount,jdbcType=INTEGER}, #{addrs,jdbcType=LONGVARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into block_addrs_${tableSuffix}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="bNumber != null">
                b_number,
            </if>
            <if test="blockHash != null">
                block_hash,
            </if>
            <if test="blockTimestamp">
                block_timestamp,
            </if>
            <if test="txcount != null">
                txcount,
            </if>
            <if test="addrs != null">
                addrs,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="bNumber != null">
                #{bNumber,jdbcType=BIGINT},
            </if>
            <if test="blockHash != null">
                #{blockHash,jdbcType=VARCHAR},
            </if>
            <if test="blockTimestamp != null">
                #{blockTimestamp,jdbcType=BIGINT},
            </if>
            <if test="txcount != null">
                #{txcount,jdbcType=INTEGER},
            </if>
            <if test="addrs != null">
                #{addrs,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.hpb.bc.example.BlockAddrsExample" resultType="java.lang.Long">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select count(*) from block_addrs_${tableSuffix}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        <set>
            <if test="record.bNumber != null">
                b_number = #{record.bNumber,jdbcType=BIGINT},
            </if>
            <if test="record.blockHash != null">
                block_hash = #{record.blockHash,jdbcType=VARCHAR},
            </if>
            <if test="record.blockTimestamp != null">
                block_timestamp = #{record.blockTimestamp,jdbcType=BIGINT},
            </if>
            <if test="record.txcount != null">
                txcount = #{record.txcount,jdbcType=INTEGER},
            </if>
            <if test="record.addrs != null">
                addrs = #{record.addrs,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        set b_number = #{record.bNumber,jdbcType=BIGINT},
        block_hash = #{record.blockHash,jdbcType=VARCHAR},
        block_timestamp = #{record.blockTimestamp,jdbcType=BIGINT},
        txcount = #{record.txcount,jdbcType=INTEGER},
        addrs = #{record.addrs,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        set b_number = #{record.bNumber,jdbcType=BIGINT},
        block_hash = #{record.blockHash,jdbcType=VARCHAR},
        block_timestamp = #{record.blockTimestamp,jdbcType=BIGINT},
        txcount = #{record.txcount,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        <set>
            <if test="blockHash != null">
                block_hash = #{blockHash,jdbcType=VARCHAR},
            </if>
            <if test="blockTimestamp != null">
                block_timestamp = #{blockTimestamp,jdbcType=BIGINT},
            </if>
            <if test="txcount != null">
                txcount = #{txcount,jdbcType=INTEGER},
            </if>
            <if test="addrs != null">
                addrs = #{addrs,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where b_number = #{bNumber,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        set block_hash = #{blockHash,jdbcType=VARCHAR},block_timestamp = #{blockTimestamp,jdbcType=BIGINT},txcount =
        #{txcount,jdbcType=INTEGER},
        addrs = #{addrs,jdbcType=LONGVARCHAR}
        where b_number = #{bNumber,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hpb.bc.entity.BlockAddrs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update block_addrs_${tableSuffix}
        set block_hash = #{blockHash,jdbcType=VARCHAR},
        block_timestamp = #{record.blockTimestamp,jdbcType=BIGINT},
        txcount = #{txcount,jdbcType=INTEGER}
        where b_number = #{bNumber,jdbcType=BIGINT}
    </update>

    <select id="getTotalTransactionNumber" resultType="Integer">
        select IFNULL(sum(txcount),0) from block_addrs_1
    </select>

    <select id="selectSumTxCountPerPage" resultType="Integer">
        select sum(a.txcount) from
        ( select * from block_addrs_1 where 1=1 and  <![CDATA[  b_number <= #{blockNumber}  ]]> order by b_number desc
        limit #{pageNum -1 } * pageSize ,#{pageSize} )
        a
    </select>

    <select id="selectPageBlockAddrs" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List"/>
        from block_addrs_1 where 1 = 1
        <if test=" blockNumber != null ">
            <![CDATA[
           and b_number <= #{b_number}
          ]]>
        </if>
        LIMIT #{pageNum -1 } * pageSize,#{pageSize}
    </select>
    <select id="selectPageBlockAddrsUnderBlockNumber" parameterType="com.hpb.bc.entity.BlockAddrs"
            resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List"/>
        from block_addrs_1 where 1 = 1
        <if test=" blockAddrs.bNumber != null ">
            <![CDATA[
           and b_number <= #{ blockAddrs.bNumber }
          ]]>
        </if>
    </select>

    <select id="selectBlockAddrsListFromStartBlockToEndBlock" resultMap="ResultMapWithBLOBs">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where 1 = 1
        <if test=" underBlockNumber != null ">
            <![CDATA[
           and b_number < #{ underBlockNumber }
          ]]>
        </if>
        <if test=" addrs.startBlock != null ">
            <![CDATA[
           and b_number >= #{ addrs.startBlock }
          ]]>
        </if>
        <if test=" addrs.lastestBlock != null ">
            <![CDATA[
           and b_number <= #{ addrs.lastestBlock }
          ]]>
        </if>
        and txcount > 0 order by b_number desc
    </select>


    <select id="selectBlockAddrsListBetweenStartBlockAndEndBlock" resultMap="ResultMapWithBLOBs">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where 1 = 1

        <if test=" startBlockNumber != null ">
            <![CDATA[
           and b_number >= #{ startBlockNumber}
          ]]>
        </if>
        <if test=" endBlockNumber != null ">
            <![CDATA[
           and b_number <= #{ endBlockNumber }
          ]]>
        </if>
        and txcount > 0 order by b_number desc
    </select>


    <!-- 交易查询重构 -->

    <select id="selectBlockAddrsListOfPageSizeCount" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where 1 = 1
        and
        <if test=" underBlockNumber != null ">
            <![CDATA[
                b_number <= #{ underBlockNumber }
            ]]>
        </if>
        and txcount > 0
        ORDER BY b_number desc
        <if test=" pageSizeAmount != null ">
            Limit pageSizeAmount
        </if>

    </select>
    <!-- 查询一页blockAddrs List  -->
    <select id="selectPageBlockAddrsListOfPageSizeCountByDescType" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where txcount > 0
        <if test=" underBlockNumber != null ">
            <![CDATA[
                  and    b_number <= #{ underBlockNumber }
            ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" pageSizeAmount != null ">
            Limit #{ pageSizeAmount }
        </if>

    </select>
    <!-- 查询一页blockAddrs List ,交易列表 -->
    <select id="selectSumTxOfPageBlockAddrsListOfPageSizeCountByDescType" resultType="java.lang.Integer">
        select sum(txcount) from (select * from block_addrs_1 where txcount > 0 and
        <if test=" underBlockNumber != null ">
            <![CDATA[
                  and    b_number <= #{ underBlockNumber }
            ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" pageSizeAmount != null ">
            Limit #{ pageSizeAmount }
        </if>
        ) a
    </select>


    <select id="selectBlockAddrsListBiggerThanBlockNumberAndLimitNByDescType" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where txcount > 0
        <if test=" underBlockNumber != null ">
            <![CDATA[
                  and    b_number <= #{ underBlockNumber }
            ]]>
        </if>
        <if test=" targetBlockNumber != null ">
            <![CDATA[
                  and    b_number >= #{ targetBlockNumber }
            ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" limitAmount != null ">
            Limit #{ limitAmount }
        </if>

    </select>


    <select id="selectBlockAddrsListSmallerThanBlockNumberAndLimitNByDescType" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where txcount > 0
        <!-- <if test=" underBlockNumber != null ">
           <![CDATA[
                       and    b_number <= #{ underBlockNumber }
                 ]]>
         </if>-->
        <if test=" targetBlockNumber != null ">
            <![CDATA[
                  and    b_number <= #{ targetBlockNumber }
            ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" limitAmount != null ">
            Limit #{ limitAmount }
        </if>
    </select>

    <select id="selectSumTxAmountInList" resultType="java.lang.Integer">
        select sum(txcount) from block_addrs_1 where 1=1
        and b_number in
        <foreach open="(" close=")" collection="blockAddrsList" index="index" item="item" separator=",">
            #{item.bNumber}
        </foreach>

    </select>

    <select id="selectBlockAddrsListIndexOfAddressBiggerThanByLimitCountAndDescType" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where txcount > 0
        <if test=" targetBlockNumber != null ">
            <![CDATA[
                  and    b_number >= #{ targetBlockNumber }
            ]]>
        </if>
        <if test=" hexAddressNumber != null ">
            <![CDATA[
              and LOCATE(#{hexAddressNumber},addrs) >0
       ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" limitAmount != null ">
            Limit #{ limitAmount }
        </if>
    </select>

    <select id="selectBlockAddrsListIndexOfAddressSmallerThanByLimitCountAndDescType" resultMap="BaseResultMap">
        select distinct
        <include refid="Base_Column_List_WITH_ADDRS"/>
        from block_addrs_1 where txcount > 0
        <if test=" targetBlockNumber != null ">
            <![CDATA[
                  and    b_number <= #{ targetBlockNumber }
            ]]>
        </if>
        <if test=" hexAddressNumber != null ">
            <![CDATA[
              and LOCATE(#{hexAddressNumber},addrs) >0
       ]]>
        </if>
        <if test=" descType == 'desc' ">
            ORDER BY b_number desc
        </if>
        <if test=" descType == 'asc' ">
            ORDER BY b_number asc
        </if>
        <if test=" limitAmount != null ">
            Limit #{ limitAmount }
        </if>
    </select>
    <select id="selectBlockAddrsListFromStartBlockToEndBlockOfTheAddrs" resultMap="BaseResultMap">
        select distinct * from block_addrs_1 where txcount > 0
        <if test=" hexAddressNumber != null ">
            <![CDATA[
              and LOCATE(#{hexAddressNumber},addrs) >0
             ]]>
        </if>
        order by b_number desc
    </select>

</mapper>
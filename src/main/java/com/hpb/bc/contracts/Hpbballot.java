/*
 * Copyright 2020 HPB Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hpb.bc.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.FunctionEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.Address;
import io.hpb.web3.abi.datatypes.Bool;
import io.hpb.web3.abi.datatypes.DynamicArray;
import io.hpb.web3.abi.datatypes.Event;
import io.hpb.web3.abi.datatypes.Function;
import io.hpb.web3.abi.datatypes.Type;
import io.hpb.web3.abi.datatypes.Utf8String;
import io.hpb.web3.abi.datatypes.generated.Bytes32;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple2;
import io.hpb.web3.tuples.generated.Tuple3;
import io.hpb.web3.tuples.generated.Tuple4;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.RawTransactionManager;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import io.hpb.web3.tx.gas.StaticGasProvider;

import rx.Observable;
import rx.functions.Func1;

@SuppressWarnings({"unchecked", "rawtypes"})
public class Hpbballot extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_VOTERESULT = "voteResult";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_ENDBLOCK = "endBlock";

    public static final String FUNC_UPDATECANDIDATE = "updateCandidate";

    public static final String FUNC_GETCANDIDATEINDEXARRAYLENGTH = "getCandidateIndexArrayLength";

    public static final String FUNC_ROUND = "round";

    public static final String FUNC_FECHVOTERESULTFORCANDIDATEBYSNAPSHOTBLOCK = "fechVoteResultForCandidateBySnapshotBlock";

    public static final String FUNC_SETSNAPSHOTBALANCEBATCH = "setSnapshotBalanceBatch";

    public static final String FUNC_UPDATECONTRACT = "updateContract";

    public static final String FUNC_SETSNAPSHOTBALANCE = "setSnapshotBalance";

    public static final String FUNC_FECHALLVOTERESULTFORCURRENT = "fechAllVoteResultForCurrent";

    public static final String FUNC_VOTENOLOCKBYADMINBATCH = "voteNoLockByAdminBatch";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_BEGINVOTE = "beginVote";

    public static final String FUNC_VOTENOLOCKBATCH = "voteNoLockBatch";

    public static final String FUNC_MAX_UINT256 = "MAX_UINT256";

    public static final String FUNC_FECHALLCANDIDATESBYSNAPSHOTBLOCK = "fechAllCandidatesBySnapshotBlock";

    public static final String FUNC_FECHALLVOTERSBYSNAPSHOTBLOCK = "fechAllVotersBySnapshotBlock";

    public static final String FUNC_FECHVOTEMAININFO = "fechVoteMainInfo";

    public static final String FUNC_STARTBLOCK = "startBlock";

    public static final String FUNC_FECHCURRENTSNAPSHOTBLOCKINDEX = "fechCurrentSnapshotBlockIndex";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_FECHVOTENUMFORCANDIDATE = "fechVoteNumForCandidate";

    public static final String FUNC_CANCELVOTEFORCANDIDATE = "cancelVoteForCandidate";

    public static final String FUNC_CAPACITY = "capacity";

    public static final String FUNC_VOTENOLOCK = "voteNoLock";

    public static final String FUNC_GETCANDIDATEINDEXARRAY = "getCandidateIndexArray";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_FECHSNAPSHOTBLOCKBYINDEX = "fechSnapshotBlockByIndex";

    public static final String FUNC_FECHVOTENUMFORCANDIDATEBYSNAPSHOTBLOCK = "fechVoteNumForCandidateBySnapshotBlock";

    public static final String FUNC_FECHVOTEMAININFOBYSNAPSHOTBLOCK = "fechVoteMainInfoBySnapshotBlock";

    public static final String FUNC_GETVOTERESULT = "getVoteResult";

    public static final String FUNC_CHANGESTAGEBLOCK = "changeStageBlock";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETROUND = "setRound";

    public static final String FUNC_CURRENTSNAPSHOTBLOCK = "currentSnapshotBlock";

    public static final String FUNC_FECHVOTEINFOFORVOTERBYSNAPSHOTBLOCK = "fechVoteInfoForVoterBySnapshotBlock";

    public static final String FUNC_DELETECANDIDATES = "deleteCandidates";

    public static final String FUNC_ENDVOTE = "endVote";

    public static final String FUNC_FECHALLVOTERESULTPRESTAGEBYBLOCK = "fechAllVoteResultPreStageByBlock";

    public static final String FUNC_FECHVOTEINFOFORVOTER = "fechVoteInfoForVoter";

    public static final String FUNC_VOTENOLOCKBYADMIN = "voteNoLockByAdmin";

    public static final String FUNC_RESETHASAUTOVOTE = "resetHasAutoVote";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_DELETECANDIDATEBYSNAPSHOTBLOCK = "deleteCandidateBySnapshotBlock";

    public static final String FUNC_CANDIDATEINDEXARRAY = "candidateIndexArray";

    public static final String FUNC_HASAUTOVOTE = "hasAutoVote";

    public static final String FUNC_FECHALLVOTERESULTBYSNAPSHOTBLOCK = "fechAllVoteResultBySnapshotBlock";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_VOTESTAGES = "voteStages";

    public static final String FUNC_FECHSTAGEINDEXBYSNAPSHOTBLOCK = "fechStageIndexBySnapshotBlock";

    public static final String FUNC_FECHVOTERESULTFORCANDIDATE = "fechVoteResultForCandidate";

    public static final Event CANDIDATEADDED_EVENT = new Event("CandidateAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event CANDIDATEUPDATED_EVENT = new Event("CandidateUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Utf8String>(true) {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event CANDIDATEDELETED_EVENT = new Event("CandidateDeleted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }));
    ;

    public static final Event DOVOTED_EVENT = new Event("DoVoted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event UPDATECONTRACT_EVENT = new Event("UpdateContract",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event CHANGESTAGEBLOCK_EVENT = new Event("ChangeStageBlock",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>(true) {
            }));
    ;

    public static final Event SETSNAPSHOTBALANCE_EVENT = new Event("SetSnapshotBalance",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event VOTENOLOCKBYADMININVOKEDOVOTED_EVENT = new Event("VoteNoLockByAdminInvokeDoVoted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    protected Hpbballot(String contractAddress, Web3 web3, Credentials credentials,
                        BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, new RawTransactionManager(web3, credentials), new StaticGasProvider(gasPrice, gasLimit));
    }

    protected Hpbballot(String contractAddress, Web3 web3, TransactionManager transactionManager,
                        BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, new StaticGasProvider(gasPrice, gasLimit));
    }

    protected Hpbballot(String contractAddress, Web3 web3, TransactionManager transactionManager,
                        ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, gasProvider);
    }

    public RemoteCall<TransactionReceipt> voteResult() {
        final Function function = new Function(
                FUNC_VOTERESULT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    // 结束投票的区块号
    public RemoteCall<Uint256> endBlock() {
        final Function function = new Function(FUNC_ENDBLOCK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 更新候选者 updateMoreInfo Candidate
     *
     * @param _candidateAddr Candidate account address for return bond (HPB)
     * @param _facilityId    候选者机器设备号或者节点ID Candidate machine equipment number or node ID
     * @param _name          候选者名称  Candidate name
     */
    public RemoteCall<TransactionReceipt> updateCandidate(Address _candidateAddr,
                                                          Utf8String _facilityId, Utf8String _name) {
        final Function function = new Function(
                FUNC_UPDATECANDIDATE,
                Arrays.<Type>asList(_candidateAddr, _facilityId, _name),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getCandidateIndexArrayLength() {
        final Function function = new Function(FUNC_GETCANDIDATEINDEXARRAYLENGTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> round() {
        final Function function = new Function(FUNC_ROUND,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取候选人指定阶段的投票详细情况
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechVoteResultForCandidateBySnapshotBlock(Address candidateAddr,
                                                                                                                      Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHVOTERESULTFORCANDIDATEBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(candidateAddr, _snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    /**
     * 批量设置投票人的余额快照
     */
    public RemoteCall<TransactionReceipt> setSnapshotBalanceBatch(DynamicArray<Address> voterAddrs,
                                                                  DynamicArray<Uint256> _snapshotBalances) {
        final Function function = new Function(
                FUNC_SETSNAPSHOTBALANCEBATCH,
                Arrays.<Type>asList(voterAddrs, _snapshotBalances),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // 改变投票区间值,改变保证金最少金额,改变投票版本号
    public RemoteCall<TransactionReceipt> updateContract(Uint256 _startBlock, Uint256 _endBlock,
                                                         Uint256 _capacity, Uint256 _version) {
        final Function function = new Function(
                FUNC_UPDATECONTRACT,
                Arrays.<Type>asList(_startBlock, _endBlock, _capacity, _version),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 设置投票人的快照余额（以指定的区块号为准，到时候由官方或者HPB基金会对外公布）
     * Set the voter's snapshot balance (subject to the designated block number,
     * to be published by the official or HPB Foundation)
     */
    public RemoteCall<TransactionReceipt> setSnapshotBalance(Address voterAddr,
                                                             Uint256 _snapshotBalance) {
        final Function function = new Function(
                FUNC_SETSNAPSHOTBALANCE,
                Arrays.<Type>asList(voterAddr, _snapshotBalance),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 获取当前阶段候选人所有得票情况
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechAllVoteResultForCurrent() {
        final Function function = new Function(FUNC_FECHALLVOTERESULTFORCURRENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    /**
     * 用于批量自动投票，根据前一个轮次的投票记录程序自动投票
     */
    public RemoteCall<TransactionReceipt> voteNoLockByAdminBatch(DynamicArray<Address> voterAddrs,
                                                                 DynamicArray<Address> candidateAddrs, DynamicArray<Uint256> nums) {
        final Function function = new Function(
                FUNC_VOTENOLOCKBYADMINBATCH,
                Arrays.<Type>asList(voterAddrs, candidateAddrs, nums),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // 删除设置快照余额的管理员
    public RemoteCall<TransactionReceipt> deleteAdmin(Address addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(addr),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 管理员启动投票开始
     */
    public RemoteCall<TransactionReceipt> beginVote() {
        final Function function = new Function(
                FUNC_BEGINVOTE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 用于批量非质押(锁定)投票  For non locked voting
     */
    public RemoteCall<TransactionReceipt> voteNoLockBatch(DynamicArray<Address> candidateAddrs,
                                                          DynamicArray<Uint256> nums) {
        final Function function = new Function(
                FUNC_VOTENOLOCKBATCH,
                Arrays.<Type>asList(candidateAddrs, nums),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> MAX_UINT256() {
        final Function function = new Function(FUNC_MAX_UINT256,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取指定阶段所有候选人的详细信息
     * Get detailed information about all candidates.
     */
    public RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Bytes32>>> fechAllCandidatesBySnapshotBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHALLCANDIDATESBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Bytes32>>() {
                }, new TypeReference<DynamicArray<Bytes32>>() {
                }));
        return new RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Bytes32>>>(
                new Callable<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Bytes32>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Bytes32>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Bytes32>) results.get(1),
                                (DynamicArray<Bytes32>) results.get(2));
                    }
                });
    }

    /**
     * 获取指定阶段所有投票人的详细信息
     */
    public RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Uint256>>> fechAllVotersBySnapshotBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHALLVOTERSBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Uint256>>>(
                new Callable<Tuple3<DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple3<DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Uint256>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1),
                                (DynamicArray<Uint256>) results.get(2));
                    }
                });
    }

    /**
     * 获取当前阶段投票人的快照余额和总投票数
     * Get the snapshot balances and total votes of voters.
     */
    public RemoteCall<Tuple2<Uint256, Uint256>> fechVoteMainInfo() {
        final Function function = new Function(FUNC_FECHVOTEMAININFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteCall<Tuple2<Uint256, Uint256>>(
                new Callable<Tuple2<Uint256, Uint256>>() {
                    @Override
                    public Tuple2<Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0),
                                (Uint256) results.get(1));
                    }
                });
    }

    // 开始投票的区块号
    public RemoteCall<Uint256> startBlock() {
        final Function function = new Function(FUNC_STARTBLOCK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 得到当前阶段序号（轮次）
     */
    public RemoteCall<Uint256> fechCurrentSnapshotBlockIndex() {
        final Function function = new Function(FUNC_FECHCURRENTSNAPSHOTBLOCKINDEX,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    // 当前票池的版本号
    public RemoteCall<Uint256> version() {
        final Function function = new Function(FUNC_VERSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取当前阶段候选人的累计总得票数，根据指定的投票轮次
     * Total number of votes obtained from candidates
     */
    public RemoteCall<Uint256> fechVoteNumForCandidate(Address candidateAddr) {
        final Function function = new Function(FUNC_FECHVOTENUMFORCANDIDATE,
                Arrays.<Type>asList(candidateAddr),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 撤回当前阶段对某个候选人的投票 Withdraw a vote on a candidate.
     */
    public RemoteCall<TransactionReceipt> cancelVoteForCandidate(Address candidateAddr,
                                                                 Uint256 num) {
        final Function function = new Function(
                FUNC_CANCELVOTEFORCANDIDATE,
                Arrays.<Type>asList(candidateAddr, num),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // 最终获选者总数（容量，获选者数量上限）
    public RemoteCall<Uint256> capacity() {
        final Function function = new Function(FUNC_CAPACITY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 用于非质押(锁定)投票  For non locked voting
     */
    public RemoteCall<TransactionReceipt> voteNoLock(Address candidateAddr, Uint256 num) {
        final Function function = new Function(
                FUNC_VOTENOLOCK,
                Arrays.<Type>asList(candidateAddr, num),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getCandidateIndexArray() {
        final Function function = new Function(FUNC_GETCANDIDATEINDEXARRAY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    // 增加设置快照余额的管理员
    public RemoteCall<TransactionReceipt> addAdmin(Address addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(addr),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 根据阶段序号得到阶段blockNum(取得快照的区块号)
     */
    public RemoteCall<Uint256> fechSnapshotBlockByIndex(Uint256 _index) {
        final Function function = new Function(FUNC_FECHSNAPSHOTBLOCKBYINDEX,
                Arrays.<Type>asList(_index),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取指定阶段候选人的总得票数，根据指定的投票轮次
     * Total number of votes obtained from candidates
     */
    public RemoteCall<Uint256> fechVoteNumForCandidateBySnapshotBlock(Address candidateAddr,
                                                                      Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHVOTENUMFORCANDIDATEBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(candidateAddr, _snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取指定阶段投票人的快照余额和总投票数
     * Get the snapshot balances and total votes of voters.
     */
    public RemoteCall<Tuple2<Uint256, Uint256>> fechVoteMainInfoBySnapshotBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHVOTEMAININFOBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteCall<Tuple2<Uint256, Uint256>>(
                new Callable<Tuple2<Uint256, Uint256>>() {
                    @Override
                    public Tuple2<Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0),
                                (Uint256) results.get(1));
                    }
                });
    }

    /**
     * 得到最终投票选举结果 ,必须在调用voteResult后执行
     * 该方法为常量方法，可以通过消息调用
     */
    public RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Uint256>>> getVoteResult() {
        final Function function = new Function(FUNC_GETVOTERESULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Bytes32>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Uint256>>>(
                new Callable<Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Uint256>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<DynamicArray<Address>, DynamicArray<Bytes32>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Bytes32>) results.get(1),
                                (DynamicArray<Uint256>) results.get(2));
                    }
                });
    }

    /**
     * 更新阶段轮次
     */
    public RemoteCall<TransactionReceipt> changeStageBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(
                FUNC_CHANGESTAGEBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    // 设置计算选举结果的截止轮数
    public RemoteCall<TransactionReceipt> setRound(Uint256 _round) {
        final Function function = new Function(
                FUNC_SETROUND,
                Arrays.<Type>asList(_round),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> currentSnapshotBlock() {
        final Function function = new Function(FUNC_CURRENTSNAPSHOTBLOCK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取指定阶段投票人的所有投票情况 Get all the votes of voters.
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechVoteInfoForVoterBySnapshotBlock(Address voterAddr,
                                                                                                                Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHVOTEINFOFORVOTERBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(voterAddr, _snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    /**
     * 删除候选者 Delete Candidate
     *
     * @param _candidateAddr 候选者账户地址 Candidate account address
     */
    public RemoteCall<TransactionReceipt> deleteCandidates(Address _candidateAddr) {
        final Function function = new Function(
                FUNC_DELETECANDIDATES,
                Arrays.<Type>asList(_candidateAddr),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 管理员启动投票结束
     * The administrator starts the voting.
     */
    public RemoteCall<TransactionReceipt> endVote() {
        final Function function = new Function(
                FUNC_ENDVOTE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 获取指定阶段的前一个阶段（轮次）候选人所有得票情况
     */
    public RemoteCall<Tuple4<Uint256, Uint256, DynamicArray<Address>, DynamicArray<Uint256>>> fechAllVoteResultPreStageByBlock(Uint256 _block) {
        final Function function = new Function(FUNC_FECHALLVOTERESULTPRESTAGEBYBLOCK,
                Arrays.<Type>asList(_block),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple4<Uint256, Uint256, DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple4<Uint256, Uint256, DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple4<Uint256, Uint256, DynamicArray<Address>, DynamicArray<Uint256>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Uint256, Uint256, DynamicArray<Address>, DynamicArray<Uint256>>(
                                (Uint256) results.get(0),
                                (Uint256) results.get(1),
                                (DynamicArray<Address>) results.get(2),
                                (DynamicArray<Uint256>) results.get(3));
                    }
                });
    }

    /**
     * 获取当前阶段投票人的所有投票情况 Get all the votes of voters.
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechVoteInfoForVoter(Address voterAddr) {
        final Function function = new Function(FUNC_FECHVOTEINFOFORVOTER,
                Arrays.<Type>asList(voterAddr),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    /**
     * 用于自动投票，根据前一个轮次的投票记录程序自动投票
     */
    public RemoteCall<TransactionReceipt> voteNoLockByAdmin(Address voterAddr,
                                                            Address candidateAddr, Uint256 num) {
        final Function function = new Function(
                FUNC_VOTENOLOCKBYADMIN,
                Arrays.<Type>asList(voterAddr, candidateAddr, num),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> resetHasAutoVote() {
        final Function function = new Function(
                FUNC_RESETHASAUTOVOTE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // 对投票者设置快照余额的管理员
    public RemoteCall<Address> adminMap(Address param0) {
        final Function function = new Function(FUNC_ADMINMAP,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 增加候选者  add Candidate
     *
     * @param _candidateAddr Candidate account address for return bond (HPB)
     * @param _facilityId    候选者机器设备号或者节点ID Candidate machine equipment number or node ID
     * @param _name          候选者名称  Candidate name
     */
    public RemoteCall<TransactionReceipt> addCandidate(Address _candidateAddr,
                                                       Utf8String _facilityId, Utf8String _name) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(_candidateAddr, _facilityId, _name),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    /**
     * 根据阶段删除候选者
     *
     * @param _candidateAddr 候选者账户地址 Candidate account address
     */
    public RemoteCall<TransactionReceipt> deleteCandidateBySnapshotBlock(Address _candidateAddr,
                                                                         Uint256 _snapshotBlock) {
        final Function function = new Function(
                FUNC_DELETECANDIDATEBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_candidateAddr, _snapshotBlock),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    // 最终选举出的候选人，便于查询
    public RemoteCall<Uint256> candidateIndexArray(Uint256 param0) {
        final Function function = new Function(FUNC_CANDIDATEINDEXARRAY,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasAutoVote() {
        final Function function = new Function(FUNC_HASAUTOVOTE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取指定阶段候选人所有得票情况
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechAllVoteResultBySnapshotBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHALLVOTERESULTBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(newOwner),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<Uint256, Uint256>> voteStages(Uint256 param0) {
        final Function function = new Function(FUNC_VOTESTAGES,
                Arrays.<Type>asList(param0),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteCall<Tuple2<Uint256, Uint256>>(
                new Callable<Tuple2<Uint256, Uint256>>() {
                    @Override
                    public Tuple2<Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0),
                                (Uint256) results.get(1));
                    }
                });
    }

    /**
     * 根据blockNum(取得快照的区块号)得到阶段序号
     */
    public RemoteCall<Uint256> fechStageIndexBySnapshotBlock(Uint256 _snapshotBlock) {
        final Function function = new Function(FUNC_FECHSTAGEINDEXBYSNAPSHOTBLOCK,
                Arrays.<Type>asList(_snapshotBlock),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    /**
     * 获取当前阶段候选人的投票详细情况
     */
    public RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>> fechVoteResultForCandidate(Address candidateAddr) {
        final Function function = new Function(FUNC_FECHVOTERESULTFORCANDIDATE,
                Arrays.<Type>asList(candidateAddr),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>(
                new Callable<Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple2<DynamicArray<Address>, DynamicArray<Uint256>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Address>, DynamicArray<Uint256>>(
                                (DynamicArray<Address>) results.get(0),
                                (DynamicArray<Uint256>) results.get(1));
                    }
                });
    }

    public static RemoteCall<Hpbballot> deploy(Web3 web3, Credentials credentials,
                                               BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue,
                                               Uint256 _startBlock, Uint256 _endBlock, Uint256 _capacity, Uint256 _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_startBlock, _endBlock, _capacity, _version));
        return deployRemoteCall(Hpbballot.class, web3, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RemoteCall<Hpbballot> deploy(Web3 web3, TransactionManager transactionManager,
                                               BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue,
                                               Uint256 _startBlock, Uint256 _endBlock, Uint256 _capacity, Uint256 _version) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_startBlock, _endBlock, _capacity, _version));
        return deployRemoteCall(Hpbballot.class, web3, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public List<CandidateAddedEventResponse> getCandidateAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEADDED_EVENT, transactionReceipt);
        ArrayList<CandidateAddedEventResponse> responses = new ArrayList<CandidateAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.facilityId = (Utf8String) eventValues.getIndexedValues().get(1);
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CandidateAddedEventResponse> candidateAddedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, CandidateAddedEventResponse>() {
            @Override
            public CandidateAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANDIDATEADDED_EVENT, log);
                CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.facilityId = (Utf8String) eventValues.getIndexedValues().get(1);
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<CandidateAddedEventResponse> candidateAddedEventObservable(DefaultBlockParameter startBlock,
                                                                                 DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEADDED_EVENT));
        return candidateAddedEventObservable(filter);
    }

    public List<CandidateUpdatedEventResponse> getCandidateUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEUPDATED_EVENT, transactionReceipt);
        ArrayList<CandidateUpdatedEventResponse> responses = new ArrayList<CandidateUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateUpdatedEventResponse typedResponse = new CandidateUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.facilityId = (Utf8String) eventValues.getIndexedValues().get(1);
            typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CandidateUpdatedEventResponse> candidateUpdatedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, CandidateUpdatedEventResponse>() {
            @Override
            public CandidateUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANDIDATEUPDATED_EVENT, log);
                CandidateUpdatedEventResponse typedResponse = new CandidateUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.facilityId = (Utf8String) eventValues.getIndexedValues().get(1);
                typedResponse.name = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<CandidateUpdatedEventResponse> candidateUpdatedEventObservable(DefaultBlockParameter startBlock,
                                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEUPDATED_EVENT));
        return candidateUpdatedEventObservable(filter);
    }

    public List<CandidateDeletedEventResponse> getCandidateDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEDELETED_EVENT, transactionReceipt);
        ArrayList<CandidateDeletedEventResponse> responses = new ArrayList<CandidateDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateDeletedEventResponse typedResponse = new CandidateDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CandidateDeletedEventResponse> candidateDeletedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, CandidateDeletedEventResponse>() {
            @Override
            public CandidateDeletedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANDIDATEDELETED_EVENT, log);
                CandidateDeletedEventResponse typedResponse = new CandidateDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<CandidateDeletedEventResponse> candidateDeletedEventObservable(DefaultBlockParameter startBlock,
                                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEDELETED_EVENT));
        return candidateDeletedEventObservable(filter);
    }

    public List<DoVotedEventResponse> getDoVotedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DOVOTED_EVENT, transactionReceipt);
        ArrayList<DoVotedEventResponse> responses = new ArrayList<DoVotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DoVotedEventResponse typedResponse = new DoVotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.voteAddr = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(2);
            typedResponse.num = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.flag = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DoVotedEventResponse> doVotedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, DoVotedEventResponse>() {
            @Override
            public DoVotedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DOVOTED_EVENT, log);
                DoVotedEventResponse typedResponse = new DoVotedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.voteAddr = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.candidateAddr = (Address) eventValues.getIndexedValues().get(2);
                typedResponse.num = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.flag = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<DoVotedEventResponse> doVotedEventObservable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOVOTED_EVENT));
        return doVotedEventObservable(filter);
    }

    public List<UpdateContractEventResponse> getUpdateContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATECONTRACT_EVENT, transactionReceipt);
        ArrayList<UpdateContractEventResponse> responses = new ArrayList<UpdateContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateContractEventResponse typedResponse = new UpdateContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.startBlock = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.endBlock = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.capacity = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateContractEventResponse> updateContractEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, UpdateContractEventResponse>() {
            @Override
            public UpdateContractEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATECONTRACT_EVENT, log);
                UpdateContractEventResponse typedResponse = new UpdateContractEventResponse();
                typedResponse.log = log;
                typedResponse.version = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.startBlock = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.endBlock = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.capacity = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<UpdateContractEventResponse> updateContractEventObservable(DefaultBlockParameter startBlock,
                                                                                 DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATECONTRACT_EVENT));
        return updateContractEventObservable(filter);
    }

    public List<ChangeStageBlockEventResponse> getChangeStageBlockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGESTAGEBLOCK_EVENT, transactionReceipt);
        ArrayList<ChangeStageBlockEventResponse> responses = new ArrayList<ChangeStageBlockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeStageBlockEventResponse typedResponse = new ChangeStageBlockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.preStageBlock = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.stageBlock = (Uint256) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChangeStageBlockEventResponse> changeStageBlockEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ChangeStageBlockEventResponse>() {
            @Override
            public ChangeStageBlockEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGESTAGEBLOCK_EVENT, log);
                ChangeStageBlockEventResponse typedResponse = new ChangeStageBlockEventResponse();
                typedResponse.log = log;
                typedResponse.preStageBlock = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.stageBlock = (Uint256) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ChangeStageBlockEventResponse> changeStageBlockEventObservable(DefaultBlockParameter startBlock,
                                                                                     DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGESTAGEBLOCK_EVENT));
        return changeStageBlockEventObservable(filter);
    }

    public List<SetSnapshotBalanceEventResponse> getSetSnapshotBalanceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSNAPSHOTBALANCE_EVENT, transactionReceipt);
        ArrayList<SetSnapshotBalanceEventResponse> responses = new ArrayList<SetSnapshotBalanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetSnapshotBalanceEventResponse typedResponse = new SetSnapshotBalanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voteStageIndex = (Uint256) eventValues.getIndexedValues().get(0);
            typedResponse.voterAddr = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._snapshotBalance = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetSnapshotBalanceEventResponse> setSnapshotBalanceEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, SetSnapshotBalanceEventResponse>() {
            @Override
            public SetSnapshotBalanceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETSNAPSHOTBALANCE_EVENT, log);
                SetSnapshotBalanceEventResponse typedResponse = new SetSnapshotBalanceEventResponse();
                typedResponse.log = log;
                typedResponse.voteStageIndex = (Uint256) eventValues.getIndexedValues().get(0);
                typedResponse.voterAddr = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._snapshotBalance = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<SetSnapshotBalanceEventResponse> setSnapshotBalanceEventObservable(DefaultBlockParameter startBlock,
                                                                                         DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETSNAPSHOTBALANCE_EVENT));
        return setSnapshotBalanceEventObservable(filter);
    }

    public List<VoteNoLockByAdminInvokeDoVotedEventResponse> getVoteNoLockByAdminInvokeDoVotedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTENOLOCKBYADMININVOKEDOVOTED_EVENT, transactionReceipt);
        ArrayList<VoteNoLockByAdminInvokeDoVotedEventResponse> responses = new ArrayList<VoteNoLockByAdminInvokeDoVotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteNoLockByAdminInvokeDoVotedEventResponse typedResponse = new VoteNoLockByAdminInvokeDoVotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voterAddr = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.candidateAddr = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.num = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VoteNoLockByAdminInvokeDoVotedEventResponse> voteNoLockByAdminInvokeDoVotedEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, VoteNoLockByAdminInvokeDoVotedEventResponse>() {
            @Override
            public VoteNoLockByAdminInvokeDoVotedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTENOLOCKBYADMININVOKEDOVOTED_EVENT, log);
                VoteNoLockByAdminInvokeDoVotedEventResponse typedResponse = new VoteNoLockByAdminInvokeDoVotedEventResponse();
                typedResponse.log = log;
                typedResponse.voterAddr = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.candidateAddr = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.num = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<VoteNoLockByAdminInvokeDoVotedEventResponse> voteNoLockByAdminInvokeDoVotedEventObservable(DefaultBlockParameter startBlock,
                                                                                                                 DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTENOLOCKBYADMININVOKEDOVOTED_EVENT));
        return voteNoLockByAdminInvokeDoVotedEventObservable(filter);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(HpbFilter filter) {
        return web3.hpbLogObservable(filter).map(new Func1<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Observable<ReceivedHpbEventResponse> receivedHpbEventObservable(DefaultBlockParameter startBlock,
                                                                           DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventObservable(filter);
    }

    public static Hpbballot load(String contractAddress, Web3 web3, Credentials credentials,
                                 BigInteger gasPrice, BigInteger gasLimit) {
        return new Hpbballot(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    public static Hpbballot load(String contractAddress, Web3 web3,
                                 TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hpbballot(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static class CandidateAddedEventResponse {
        public Log log;

        public Address candidateAddr;

        public Utf8String facilityId;

        public Utf8String name;
    }

    public static class CandidateUpdatedEventResponse {
        public Log log;

        public Address candidateAddr;

        public Utf8String facilityId;

        public Utf8String name;
    }

    public static class CandidateDeletedEventResponse {
        public Log log;

        public Address candidateAddr;
    }

    public static class DoVotedEventResponse {
        public Log log;

        public Uint256 index;

        public Address voteAddr;

        public Address candidateAddr;

        public Uint256 num;

        public Uint256 flag;
    }

    public static class UpdateContractEventResponse {
        public Log log;

        public Uint256 version;

        public Uint256 startBlock;

        public Uint256 endBlock;

        public Uint256 capacity;
    }

    public static class ChangeStageBlockEventResponse {
        public Log log;

        public Uint256 preStageBlock;

        public Uint256 stageBlock;
    }

    public static class SetSnapshotBalanceEventResponse {
        public Log log;

        public Uint256 voteStageIndex;

        public Address voterAddr;

        public Uint256 _snapshotBalance;
    }

    public static class VoteNoLockByAdminInvokeDoVotedEventResponse {
        public Log log;

        public Address voterAddr;

        public Address candidateAddr;

        public Uint256 num;
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public Address sender;

        public Uint256 amount;
    }
}
